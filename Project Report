The purpose of this project was to design and implement a Continuous Integration Continuous Deployment, or CI/CD, pipeline for Flutter development. These pipelines offer a great amount of utility to developers and businesses alike. Firstly, they can automate testing that would otherwise need to be done manually, which cuts out hours of tedious work from the development process. Secondly, they can automatically push out new releases. This means that release day is not such a nightmare and that the environment will be set up the exact same every time. This allows for both less troubleshooting and easier troubleshooting when it needs to be done. The final reason I would like to talk about is the ability to easily roll back releases. Say an update went out, and it accidentally broke one of the buttons in the application that got missed by the testing. Due to the pipeline it is extremely easy to roll back an earlier release while your team is working on fixing the update. While this is not quite industry standard these pipelines are becoming used more and more often and provide a great deal of utility for everyone involved.
	The first step in setting up our CI/CD pipeline was creating a standard development environment for working on our flutter app. This was achieved through setting up a container which held all of the necessary dependencies for creating a flutter web app. In order to do this I installed Docker, which is an open platform used for designing containers. The base image that was used in this container is Ubuntu. This was chosen because it is commonly used throughout the industry, and most developers will know their way around it to some extent. After getting the base image down I set up the dependencies that are needed for flutter development. These include clang, wget, zip, xz-utils, libglu1-mesa, openjdk-8-jdk, and more. Then I had to install all of the SDK’s and emulators that might be necessary in Flutter development. I had troubles that I never fully resolved getting the Android SDK to work. Flutter never seemed to be able to find it’s location even after setting the path manually.
	The second step was choosing a version control tool. I ended up choosing Github, mainly due to its simple integration with Microsoft Visual Studio Code, but additionally it is widely used in the industry. I did not have any prior experience working with Github and it was definitely a valuable experience to learn about branching, Github actions, and Github pages. I implemented a type of feature based branching, where I would create a branch to work on specific portions of code, and then when I was done I would merge them back to main. I did this so that I could work without the fear of destroying my source code each time I worked on it. This tool, while useful for working on solo projects, really shines in a group setting as it enables multiple collaborators to all work on the same source code easily. Additionally, with Github actions, it makes it significantly easier to automate the processes of the CI/CD pipeline. It provided the structure in which we could make the pipeline function.
	The app itself is the Flutter default application, featuring a button that increments a counter with each click. Using our CI/CD pipeline, we deployed this application to GitHub Pages. GitHub Pages serves as an excellent platform for hosting static websites directly from GitHub repositories, providing a convenient and accessible way to showcase our project to the world. With GitHub Pages, we can easily share our work with stakeholders, potential users, and the broader developer community, fostering collaboration and feedback. Its integration with our CI/CD pipeline streamlines the deployment process, ensuring that updates and improvements to our application are promptly reflected on the live site. This seamless deployment to GitHub Pages not only demonstrates the effectiveness of our CI/CD pipeline but also enhances the visibility and accessibility of our project, ultimately contributing to its success and impact.
	In conclusion this project provided a very valuable learning opportunity in developing a dev environment, creating a CI/CD pipeline, and troubleshooting. These are all valuable tools in the industry and I am happy that I got this chance to work on developing them now. I definitely ran into problems early on with configuring my developer environment and never fully fixed the Android SDK which I would like to work on in the future. Additionally, I would sometimes get a bug where flutter build web would just not work in my deploy workflow, which I never fully resolved. This is another thing I could work on in the future. While there are still problems with it I am very proud of the work that I put in and I believe that it makes me a much better candidate for jobs in the future.

	
	

